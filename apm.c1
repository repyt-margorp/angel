#include <stdio.h>
#include <string.h>

/**
 ****************************************************************
 *	Arbitrary Precision Mathematics Library
 ****************************************************************
 */

typedef unsigned char apm_base_t;
typedef unsigned long apm_super_t;

#define APM_BASE_ZERO		((apm_base_t) 0)
#define APM_BASE_ONE		((apm_base_t) 1)
#define APM_BASE_MAX		((apm_base_t) -1)
#define APM_BASE_BIT_SIZE	(8 * sizeof(apm_base_t))
#define APM_BASE_BIT_HALF_SIZE	(APM_BASE_BIT_SIZE / 2)
#define APM_BASE_FULL		(APM_BASE_MAX)
#define APM_BASE_HALF_FULL	(APM_BASE_FULL >> APM_BASE_BIT_HALF_SIZE)

void print_number(
	apm_base_t *array,
	int length)
{
	int i;

	for(i = 0; i < length; ++i) {
		printf("%02x ", array[i]);
	}
	printf("(%u)\n", *(unsigned int *)array);
}

int apm_base_increment(
	apm_base_t *result,
	apm_base_t *carry_out,
	apm_base_t operand)
{
	*result = operand + APM_BASE_ONE;

	if(*result == APM_BASE_ZERO) {
		*carry_out = APM_BASE_ONE;
	} else {
		*carry_out = APM_BASE_ZERO;
	}

	return 0;
}

int apm_base_add(
	apm_base_t *result,
	apm_base_t *carry_out,
	apm_base_t operand1,
	apm_base_t operand2,
	apm_base_t carry_in)
{
	*result = operand1 + operand2 + carry_in;

	if(carry_in == APM_BASE_ZERO) {
		if(*result < operand1 || *result < operand2) {
			*carry_out = APM_BASE_ONE;
		} else {
			*carry_out = APM_BASE_ZERO;
		}
	} else {
		if(*result <= operand1 || *result <= operand2) {
			*carry_out = APM_BASE_ONE;
		} else {
			*carry_out = APM_BASE_ZERO;
		}
	}

	return 0;
}


/**
 ****************************************************************
 *
 ****************************************************************
 */

int apm_base_array_zero(
	apm_base_t *array,
	int length)
{
	int i;

	for(i = 0; i < length; ++i) {
		array[i] = APM_BASE_ZERO;
	}

	return 0;
}
int apm_base_array_max(
	apm_base_t *array,
	int length)
{
	int i;

	for(i = 0; i < length; ++i) {
		array[i] = APM_BASE_MAX;
	}

	return 0;
}
int apm_base_array_copy(
	apm_base_t *to,
	apm_base_t *from,
	int length)
{
	int i;

	for(i = 0; i < length; ++i) {
		to[i] = from[i];
	}

	return 0;
}
int apm_base_array_extend(
	apm_base_t *to,
	int to_length,
	apm_base_t *from,
	int from_length)
{
	apm_base_array_copy(
		to,
		from,
		from_length);
	apm_base_array_zero(
		&to[from_length],
		to_length - from_length);
}

/**
 ****************************************************************
 *
 ****************************************************************
 */
int apm_base_array_negate(
	apm_base_t *to,
	apm_base_t *from,
	int length)
{
	int i;

	for(i = 0; i < length; ++i) {
		to[i] = ~from[i];
	}

	return 0;
}

/**
 ****************************************************************
 *
 ****************************************************************
 */

int apm_base_array_increment(
	apm_base_t *operand,
	int operand_length)
{
	int i;
	apm_base_t carry;

	carry = APM_BASE_ONE;
	for(i = 0; i < operand_length && carry != APM_BASE_ZERO; ++i) {
		apm_base_increment(
			&operand[i],
			&carry,
			operand[i]);
	}

	return 0;
}

int apm_base_array_add(
	apm_base_t *result,
	apm_base_t *carry_out,
	apm_base_t *short_operand,
	int short_operand_length,
	apm_base_t *long_operand,
	int long_operand_length,
	apm_base_t carry_in)
{
	int i;
	apm_base_t carry;

	carry = carry_in;
	for(i = 0; i < short_operand_length; ++i) {
		apm_base_add(
			&result[i],
			&carry,
			short_operand[i],
			long_operand[i],
			carry);
	}
	if(carry != APM_BASE_ZERO) {
		apm_base_array_increment(
			&result[short_operand_length],
			long_operand_length - short_operand_length);
	}

	*carry_out = carry;

	return 0;
}
int apm_base_array_negative(
	apm_base_t *long_operand,
	int long_operand_length,
	apm_base_t *short_operand,
	int short_operand_length)
{
#if 1
	apm_base_array_extend(
		long_operand,
		long_operand_length,
		short_operand,
		short_operand_length);
#else
	apm_base_array_zero(
		long_operand,
		long_operand_length);
	apm_base_array_copy(
		long_operand,
		short_operand,
		short_operand_length);
#endif
	apm_base_array_negate(
		long_operand,
		long_operand,
		long_operand_length);
	apm_base_array_increment(
		long_operand,
		long_operand_length);
}
/**
 ****************************************************************
 *
 ****************************************************************
 */
int apm_base_multiply(
	apm_base_t *lower,
	apm_base_t *upper,
	apm_base_t operand1,
	apm_base_t operand2)
{
	apm_super_t temp;

	temp = (apm_super_t)operand1 * (apm_super_t)operand2;
	*lower = temp & APM_BASE_FULL;
	*upper = temp >> APM_BASE_BIT_SIZE;

	return 0;
	
}
int apm_base_array_multiply(
	apm_base_t *result,
	apm_base_t *short_operand,
	int short_operand_length,
	apm_base_t *long_operand,
	int long_operand_length)
{
	int i, j;
	int result_length;
	apm_base_t carry;

	result_length = short_operand_length + long_operand_length;

#if 0
	apm_base_array_zero(
		result,
		short_operand_length);

	for(i = 0; i < result_length; ++i) {
		int from, to;

		if(short_operand_length + i < result_length) {
			result[short_operand_length + i] = 0;
		}
		if(i < short_operand_length) {
			from = 0;
			to = i + 1;
		} else if(i < long_operand_length) {
			from = 0;
			to = short_operand_length;
		} else {
			from = i - long_operand_length;
			to = short_operand_length;
		}
		for(j = from; j < to; ++j) {
			apm_base_t carry;	// go to trush
			apm_base_t temp[2];

			apm_base_multiply(
				&temp[0],
				&temp[1],
				short_operand[j],
				long_operand[i - j]);
			apm_base_array_add(
				&result[i],
				&carry,
				temp,
				2,
				&result[i],
				result_length - i,
				APM_BASE_ZERO);
		}
	}
#else
//	apm_base_array_zero(
//		result,
//		result_length);

	apm_base_array_zero(
		result,
		long_operand_length);
	for(i = 0; i < short_operand_length; ++i) {
		for(j = 0; j < long_operand_length; ++j) {
			apm_base_t carry;	// go to trush
			apm_base_t temp[2];

			apm_base_multiply(
				&temp[0],
				&temp[1],
				short_operand[i],
				long_operand[j]);
			if(j == long_operand_length - 1 &&
				long_operand_length + i < result_length)
			{
				result[long_operand_length + i] = 0;
			}
			apm_base_array_add(
				&result[i + j],
				&carry,
				temp,
				2,
				&result[i + j],
				result_length - (i + j),
				APM_BASE_ZERO);
		}
	}
#endif
}
/**
 ****************************************************************
 *
 ****************************************************************
 */

int apm_base_array_inverse(
	apm_base_t *to,
	int to_length,
	apm_base_t *from,
	int from_length,
	apm_base_t *buf)
{
	int i;
	int temp_length;
	int total_length;
	apm_base_t carry;

	temp_length = 1;
	*to = APM_BASE_ONE;
	to[1] = APM_BASE_ZERO;
	total_length = from_length + to_length;

	for(i = 0; i < 16; ++i) {
		printf("i = %d\n", i);

		printf("CAL0:\tfrom = ");
		print_number(from, from_length);
		printf("CAL0:\tto = ");
		print_number(to, to_length);

		apm_base_array_multiply(
			buf,
			to, to_length,
			from, from_length);
		printf("CAL1:\tbuf = ");
		print_number(buf, total_length + 1);

		memmove(
			&buf[to_length],
			&buf[to_length - 1],
			from_length + 1);
		printf("CAL2:\tbuf = ");
		print_number(buf, total_length + 1);

		apm_base_array_multiply(
			buf,
			&buf[to_length], from_length + 1,	// tricky
			to, to_length);				// tricky
		printf("CAL3:\tbuf = ");
		print_number(buf, total_length + 1);

		memmove(
			buf,
			&buf[from_length],
			to_length + 1);
		printf("CAL4:\tbuf = ");
		print_number(buf, total_length + 1);

		apm_base_array_negative(
			buf, total_length + 1,
			buf, total_length + 1);
		printf("CAL5:\tbuf = ");
		print_number(buf, total_length + 1);

		apm_base_array_add(
			buf, &carry,
			to, to_length,
			buf, total_length + 1,
			APM_BASE_ZERO);
		printf("CAL6:\tbuf = ");
		print_number(buf, total_length + 1);

		apm_base_array_add(
			buf, &carry,
			to, to_length,
			buf, total_length + 1,
			APM_BASE_ZERO);
		printf("CAL7:\tbuf = ");
		print_number(buf, total_length + 1);

		apm_base_array_copy(
			to, buf,
			to_length);
		printf("CAL8:\tto = ");
		print_number(to, to_length);
	}

	if(carry != APM_BASE_ZERO) {
		to[to_length] = carry;
		++to_length;
	}
}

/**
 ****************************************************************
 *
 ****************************************************************
 */

void add_test()
{
	unsigned int i, j;
	apm_base_t op1[sizeof(int)];
	apm_base_t op2[sizeof(int)];
	apm_base_t res[sizeof(int)];

	for(i = 0; i < 0x10000; ++i) {
		if(i % (0x10000 / 100) == 0) {
			printf("%d/100 finished\n",
				i / (0x10000/ 100));
		}
		for(j = 0; j < 0x10000; ++j) {
			apm_base_t carry;
			*(unsigned int *)op1 = i;
			*(unsigned int *)op2 = j;

			apm_base_array_add(
				res, &carry,
				op1, sizeof(int),
				op2, sizeof(int),
				APM_BASE_ZERO);

			if(*(int *)res != i + j) {
				printf("# ERROR i, j, res = %x, %x, %x\n",
					i, j, *(int *)res);
				return;
			}
		}
	}
}

void subtract_test()
{
	unsigned int i, j;
	apm_base_t op1[sizeof(int)];
	apm_base_t op2[sizeof(int)];
	apm_base_t neg[sizeof(int)];
	apm_base_t res[sizeof(int)];

	for(i = 0; i < 0x10000; ++i) {
		if(i % (0x10000 / 100) == 0) {
			printf("%d/100 finished\n",
				i / (0x10000/ 100));
		}
		for(j = 0; j < 0x10000; ++j) {
			apm_base_t carry;
			*(unsigned int *)op1 = i;
			*(unsigned int *)op2 = j;

			apm_base_array_negative(
				neg, sizeof(int),
				op2, sizeof(int));
			apm_base_array_add(
				res, &carry,
				op1, sizeof(int),
				neg, sizeof(int),
				APM_BASE_ZERO);

			if(*(int *)res != i - j) {
				printf("# ERROR i, j, neg, res = %x, %x, %x, %x\n",
					i, j, *(int *)neg, *(int *)res);
				return;
			}
		}
	}
}

void multiply_test()
{
	unsigned int i, j;
	apm_base_t op1[sizeof(int)];
	apm_base_t op2[sizeof(int)];
	apm_base_t res[sizeof(int) * 2];

	for(i = 0; i < 0x10000; ++i) {
		if(i % (0x10000 / 100) == 0) {
			printf("%d/100 finished\n",
				i / (0x10000/ 100));
		}
		for(j = 0; j < 0x10000; ++j) {
			apm_base_t carry;
			*(unsigned int *)op1 = i;
			*(unsigned int *)op2 = j;

			apm_base_array_multiply(
				res,
				op1, sizeof(int),
				op2, sizeof(int));

			if(*(int *)res != i * j) {
				printf("# ERROR i, j, res = %x, %x, %x\n",
					i, j, *(int *)res);
				return;
			}
		}
	}
}

int main()
{
	apm_base_t op1[sizeof(int)];
	apm_base_t op2[sizeof(int)];
	apm_base_t res[sizeof(int) * 2 + 1];

	apm_base_t inv[sizeof(int)];
	apm_base_t num[sizeof(int)];
	apm_base_t buf[sizeof(int) * 2];

	//add_test();
	//subtract_test();
	//multiply_test();

	*(unsigned int *)num = 48;
	apm_base_array_inverse(
		inv, 2,
		num, 1, // num, 2,
		buf);
#if 0
	*(unsigned int *)op1 = 1;
	*(unsigned int *)op2 = 1;
	apm_base_array_multiply(
		res,
		op1, sizeof(int),
		op2, sizeof(int));
	print_number(res, sizeof(int));
#endif
}

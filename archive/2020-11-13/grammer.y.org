/********************************
 *
 ********************************/
%{
#include <stdio.h>
void yyerror(char *s) {
	printf("%s\n", s);
}
int yywrap()
{
	return 1;
}
%}

%union {
	char str[256];
}


%token <str> SYMBOL
%token <str> NUMBER
%token COMMA
%token COLON
%token DOLLAR
%token SEMICOLON
%token ARROW
%token ASSIGN

%token PAREN_BEGIN
%token PAREN_END
%token BLOCK_BEGIN
%token BLOCK_END

%left COMMA
%left ARROW

%type <str> typing
%type <str> assign
%type <str> judge

%type <str> type_term
%type <str> term
%type <str> pi_term
%type <str> sigma_term
%type <str> base_term
%type <str> application

%type <str> type
%type <str> pre_type
%type <str> pi_type
%type <str> sigma_type

%%

program
	: /*none*/
	| judge SEMICOLON program
;
typing
	: SYMBOL COLON type {
		printf("typing: %s(symbol) : %s(type)\n", $1, $3);
		sprintf($$, "(%s : %s)", $1, $3);
	}
;
assign
	: SYMBOL ASSIGN term {
		printf("assign: %s(symbol) := %s(term)\n", $1, $3);
		sprintf($$, "(%s := %s)", $1, $3);
	}
;
judge
	: typing
	| assign
;

type_term
	: SYMBOL
	| application
;
term
	: base_term
//	| pi_term
//	| sigma_term
	| PAREN_BEGIN term PAREN_END {
		printf("paren term: ( %s(term) )\n", $2);
		sprintf($$, "(%s)", $2);
	}
;
pi_term
	: type BLOCK_BEGIN BLOCK_END {
		printf("pi_term: %s(type)\n", $1);
		sprintf($$, "\\%s", $1);
	}
;
sigma_term
	: term COMMA term {
		printf("sigma term: %s(term) , %s(term)\n", $1, $3);
		sprintf($$, "(%s , %s)", $1, $3);
	}
;
base_term
	: SYMBOL
	| NUMBER
	| PAREN_BEGIN application PAREN_END {
		printf("paren term: ( %s(term) )\n", $2);
		sprintf($$, "(%s)", $2);
	}
application
	: base_term
	| term base_term {
		printf("application: %s(term) %s(term)\n", $1, $2);
		sprintf($$, "%s(%s)", $1, $2);
	}
;

type
	: sigma_type
	| PAREN_BEGIN type PAREN_END {
		printf("paren type: ( %s(type) )\n", $2);
		sprintf($$, "(%s)", $2);
	}
;
pre_type
	: type
	| PAREN_BEGIN typing PAREN_END {
		printf("paren pre type: ( %s(pre type) )\n", $2);
		sprintf($$, "(%s)", $2);
	}
;
pi_type
	: type_term
	| pre_type ARROW pi_type {
		printf("pi type: %s(type) -> %s(type)\n", $1, $3);
		sprintf($$, "(%s -> %s)", $1, $3);
	}
;
sigma_type
	: pi_type
	| pre_type COMMA sigma_type {
		printf("sigma type: %s(type) , %s(type)\n", $1, $3);
		sprintf($$, "(%s , %s)", $1, $3);
	}
;

%%

int main()
{
	yyparse();
}
